using bincompl;

#var Points 64
#var MultWidth 40
#var Scale 65535

$(
	$define concat(a,b) a b
	$define COEF(i) concat(#icoefmult[#,i)
	$define divcoef(i) 4096/i
	
	$macro spawnregs(start, end, body)
	  $var i start
	  $while (i < end) 
		$if (i = 0)
			body(i) #] := # 0
		$endif
		$if (i < end && i != 0)
			body(i) #] := # divcoef(i)
		$endif
		$if (i != end-1)
			# | #
		$endif
		$var i (i + 1)
	  $endw
	$endm
)

process type Ext = begin
	in input_ena(1);
	in output_rdy_ena(1);
	out output_ena(1);
	out input_rdy_ena(1);
end;

process type Ext1 = begin
	in input_ena(1);
	in output_rdy_ena(1);
	out output_ena(1);
end;

process type Ext2 = begin
	in input_ena(1);
	in output_rdy_ena(1);
	out output_ena(1);
end;

process type Ext3 = begin
	in input_ena(1);
	in output_rdy_ena(1);
	out output_ena(1);
end;

module Top = begin
	
	process Main = begin
	
		in inp(int(16)) {forceLive};
		out outp(uint(64), uint(64), uint(64), uint(1)) {forceLive};
		out outp1(uint(64), uint(64), uint(64), uint(1)) {forceLive};
		out outpVars(uint(10), uint(64), uint(64)) {forceLive};

		data sums: [0..$(Points-1):uint(10)] int(24);
		data sumsqs: [0..$(Points-1):uint(10)] uint(32);
		data i: uint(10) = 0;
		data defi: 1 = 0b1;
		data endofoutp: uint(1) = 0;
		data endofoutp1: uint(1) = 0;
		data icoefmult: [0..$(Points-1):uint(10)] uint(13);
		data varLeft: [0..$(Points-1):uint(10)] uint(64);
		data varLeft1: [0..$(Points-1):uint(10)] uint(48);
		data varLeft2: [0..$(Points-1):uint(10)] uint(48);
		data varRight: [0..$(Points-1):uint(10)] uint(64);
		data varRight1: [0..$(Points-1):uint(10)] uint(72);
		data varRight2: [0..$(Points-1):uint(10)] uint(72);

		default {
			if defi then
				$(spawnregs(0, Points, COEF)) |
				defi := 0b0 else skip fi |
			if i > $(Points) and i < $(Points*2-2) then 
					let subsumsqs = (ext((sumsqs[$(Points-1)]-sumsqs[i-$Points]),48)) in
					let qssubsums = (((sums[$(Points-1)] - sums[i-$Points]) >* (sums[$(Points-1)] - sums[i-$Points])):uint(48)) in
					let varR = (((( subsumsqs >* (ext(icoefmult[$(Points)-(i+1-$Points)],48)))>>12){0:63}):uint(64)) - (((( qssubsums >* (ext(icoefmult[$(Points)-(i+1-$Points)] >* icoefmult[$(Points)-(i+1-$Points)],48)))>>24){0:63}):uint(64)) in {
						if i == $(Points*2-3) then endofoutp1 := 0b1 else skip fi |
						inform outp1 ((ext(subsumsqs, 64)), (ext(qssubsums, 64)), varR, endofoutp1) |
						varRight[i-$Points] := varR
					} |
					inform outpVars (i, varLeft[i-$Points-1], varRight[i-$Points-1]) |
					i := i + 1
			else skip fi
		}
		
		inp(in0) { //when true
			if i < $(Points) then
				if (i == 0) then
					sums[i] := sext(in0, 24) |
					sumsqs[i] := ((in0 >* in0):uint(32)) |
					i := i + 1
				else
					sums[i] :=  sums[i-1] + sext(in0, 24) |
					sumsqs[i] :=  sumsqs[i-1] + ((in0 >* in0):uint(32)) |
					if i == $(Points-1) then
						i := i +2
					else
						i := i + 1 fi;
					if i != 1 and i < $(Points-1) then 													// varL/R must used without first, last-1 and last value
						let qssumsqs = ext(sumsqs[i-1],48) in
						let qssums = ((sums[i-1] >* sums[i-1]):uint(48)) in
						let varL = ((((( qssumsqs >* (ext(icoefmult[i],48)))>>12){0:63}):uint(64)) - (((( qssums >* (ext(icoefmult[i] >* icoefmult[i],48)))>>24){0:63}):uint(64))) in {
							if i == $(Points-2) then endofoutp := 0b1 else skip fi |
							inform outp ((ext(qssumsqs, 64)), (ext(qssums, 64)), varL, endofoutp) |
							varLeft[i-1] := varL
						}
					else skip fi
				fi
			else skip fi
		}
		
		local: handlerForVar(k: uint(10)) when true {
			skip
		}
		
	end;
	
	module FromFile : begin
		interface slave : Ext;
		in input(1) {forceLive};
		out output(int(16)) {forceLive};
	end = external "01" with output = Main.inp;

	module ToFile : begin
		interface slave : Ext1;
		in input(1) {forceLive};
		in inputs(uint(64), uint(64), uint(64), uint(1)) {forceLive};
	end = external "02" with inputs = Main.outp;
	
	module ToFile1 : begin
		interface slave : Ext2;
		in input(1) {forceLive};
		in inputs(uint(64), uint(64), uint(64), uint(1)) {forceLive};
	end = external "03" with inputs = Main.outp1;
	
	module VarToLog : begin
		interface slave : Ext3;
		in input(1) {forceLive};
		in inputs(uint(10), uint(64), uint(64)) {forceLive};
	end = external "04" with inputs = Main.outpVars;

end;
